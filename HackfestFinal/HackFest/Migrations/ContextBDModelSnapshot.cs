// <auto-generated />
using System;
using HackFest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HackFest.Migrations
{
    [DbContext(typeof(ContextBD))]
    partial class ContextBDModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HackFest.Models.Article", b =>
                {
                    b.Property<int>("ID_Article")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID_Participant");

                    b.Property<string>("TitreArticle")
                        .IsRequired();

                    b.HasKey("ID_Article");

                    b.HasIndex("ID_Participant");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("HackFest.Models.Membre", b =>
                {
                    b.Property<int>("ID_Membre")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID_Participant");

                    b.HasKey("ID_Membre");

                    b.HasIndex("ID_Participant");

                    b.ToTable("Membres");
                });

            modelBuilder.Entity("HackFest.Models.MembreArticle", b =>
                {
                    b.Property<int>("ID_Article");

                    b.Property<int>("ID_Membre");

                    b.Property<byte>("Note");

                    b.HasKey("ID_Article", "ID_Membre");

                    b.HasIndex("ID_Membre");

                    b.ToTable("MembreArticles");
                });

            modelBuilder.Entity("HackFest.Models.Organisateur", b =>
                {
                    b.Property<int>("ID_Organisateur")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID_Participant");

                    b.Property<string>("MotDePasse")
                        .HasMaxLength(20);

                    b.Property<int>("RoleOrganisteur");

                    b.HasKey("ID_Organisateur");

                    b.HasIndex("ID_Participant");

                    b.ToTable("Organisateurs");
                });

            modelBuilder.Entity("HackFest.Models.Paiement", b =>
                {
                    b.Property<int>("ID_Paiement")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateReceptionPaiement");

                    b.Property<int>("ID_Participant");

                    b.Property<double>("Montant");

                    b.HasKey("ID_Paiement");

                    b.HasIndex("ID_Participant");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("HackFest.Models.Participant", b =>
                {
                    b.Property<int>("ID_Participant")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Affiliation")
                        .IsRequired();

                    b.Property<string>("Couriel")
                        .IsRequired();

                    b.Property<DateTime>("Date_inscription");

                    b.Property<string>("Nom")
                        .IsRequired();

                    b.Property<string>("Prenom")
                        .IsRequired();

                    b.HasKey("ID_Participant");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("HackFest.Models.Session", b =>
                {
                    b.Property<int>("ID_Article");

                    b.Property<int>("ID_Membre");

                    b.Property<DateTime>("DateSession");

                    b.Property<DateTime>("Heures");

                    b.Property<string>("TitreSession");

                    b.HasKey("ID_Article", "ID_Membre");

                    b.HasIndex("ID_Membre");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("HackFest.Models.Specialite", b =>
                {
                    b.Property<int>("ID_Specialite")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionSpecialite")
                        .IsRequired();

                    b.Property<int>("ID_Membre");

                    b.HasKey("ID_Specialite");

                    b.HasIndex("ID_Membre");

                    b.ToTable("Specialites");
                });

            modelBuilder.Entity("HackFest.Models.VersionArticle", b =>
                {
                    b.Property<int>("ID_VersionArticle")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSoumission");

                    b.Property<int>("ID_Article");

                    b.Property<decimal>("NoVersion");

                    b.Property<string>("URL");

                    b.HasKey("ID_VersionArticle");

                    b.HasIndex("ID_Article");

                    b.ToTable("VersionArticles");
                });

            modelBuilder.Entity("HackFest.Models.Article", b =>
                {
                    b.HasOne("HackFest.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ID_Participant")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HackFest.Models.Membre", b =>
                {
                    b.HasOne("HackFest.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ID_Participant")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HackFest.Models.MembreArticle", b =>
                {
                    b.HasOne("HackFest.Models.Article", "Article")
                        .WithMany("MembreArticles")
                        .HasForeignKey("ID_Article")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HackFest.Models.Membre", "Membre")
                        .WithMany("MembreArticles")
                        .HasForeignKey("ID_Membre")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HackFest.Models.Organisateur", b =>
                {
                    b.HasOne("HackFest.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ID_Participant")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HackFest.Models.Paiement", b =>
                {
                    b.HasOne("HackFest.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ID_Participant")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HackFest.Models.Session", b =>
                {
                    b.HasOne("HackFest.Models.Article", "Article")
                        .WithMany("Session")
                        .HasForeignKey("ID_Article")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HackFest.Models.Membre", "Membre")
                        .WithMany("Session")
                        .HasForeignKey("ID_Membre")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HackFest.Models.Specialite", b =>
                {
                    b.HasOne("HackFest.Models.Membre", "Membre")
                        .WithMany()
                        .HasForeignKey("ID_Membre")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HackFest.Models.VersionArticle", b =>
                {
                    b.HasOne("HackFest.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ID_Article")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
